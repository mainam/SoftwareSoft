#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SELPORTAL")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAllowBorrowDevice(AllowBorrowDevice instance);
    partial void UpdateAllowBorrowDevice(AllowBorrowDevice instance);
    partial void DeleteAllowBorrowDevice(AllowBorrowDevice instance);
    partial void InsertApprove(Approve instance);
    partial void UpdateApprove(Approve instance);
    partial void DeleteApprove(Approve instance);
    partial void InsertAwardReward(AwardReward instance);
    partial void UpdateAwardReward(AwardReward instance);
    partial void DeleteAwardReward(AwardReward instance);
    partial void InsertCabinet(Cabinet instance);
    partial void UpdateCabinet(Cabinet instance);
    partial void DeleteCabinet(Cabinet instance);
    partial void InsertCategoryDevice(CategoryDevice instance);
    partial void UpdateCategoryDevice(CategoryDevice instance);
    partial void DeleteCategoryDevice(CategoryDevice instance);
    partial void InsertCCEmailBorrow(CCEmailBorrow instance);
    partial void UpdateCCEmailBorrow(CCEmailBorrow instance);
    partial void DeleteCCEmailBorrow(CCEmailBorrow instance);
    partial void InsertDataCertification(DataCertification instance);
    partial void UpdateDataCertification(DataCertification instance);
    partial void DeleteDataCertification(DataCertification instance);
    partial void InsertDataConfig(DataConfig instance);
    partial void UpdateDataConfig(DataConfig instance);
    partial void DeleteDataConfig(DataConfig instance);
    partial void InsertDataLanguage(DataLanguage instance);
    partial void UpdateDataLanguage(DataLanguage instance);
    partial void DeleteDataLanguage(DataLanguage instance);
    partial void InsertDestroyPlan(DestroyPlan instance);
    partial void UpdateDestroyPlan(DestroyPlan instance);
    partial void DeleteDestroyPlan(DestroyPlan instance);
    partial void InsertDestroyPlan_Device(DestroyPlan_Device instance);
    partial void UpdateDestroyPlan_Device(DestroyPlan_Device instance);
    partial void DeleteDestroyPlan_Device(DestroyPlan_Device instance);
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertDeviceManager(DeviceManager instance);
    partial void UpdateDeviceManager(DeviceManager instance);
    partial void DeleteDeviceManager(DeviceManager instance);
    partial void InsertDeviceModel(DeviceModel instance);
    partial void UpdateDeviceModel(DeviceModel instance);
    partial void DeleteDeviceModel(DeviceModel instance);
    partial void InsertDeviceNotice(DeviceNotice instance);
    partial void UpdateDeviceNotice(DeviceNotice instance);
    partial void DeleteDeviceNotice(DeviceNotice instance);
    partial void InsertEducationLevel(EducationLevel instance);
    partial void UpdateEducationLevel(EducationLevel instance);
    partial void DeleteEducationLevel(EducationLevel instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryUserDevice(InventoryUserDevice instance);
    partial void UpdateInventoryUserDevice(InventoryUserDevice instance);
    partial void DeleteInventoryUserDevice(InventoryUserDevice instance);
    partial void InsertJobTitle(JobTitle instance);
    partial void UpdateJobTitle(JobTitle instance);
    partial void DeleteJobTitle(JobTitle instance);
    partial void InsertLayout(Layout instance);
    partial void UpdateLayout(Layout instance);
    partial void DeleteLayout(Layout instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocationForTeam(LocationForTeam instance);
    partial void UpdateLocationForTeam(LocationForTeam instance);
    partial void DeleteLocationForTeam(LocationForTeam instance);
    partial void InsertLocationForUser(LocationForUser instance);
    partial void UpdateLocationForUser(LocationForUser instance);
    partial void DeleteLocationForUser(LocationForUser instance);
    partial void InsertLogSendMailService(LogSendMailService instance);
    partial void UpdateLogSendMailService(LogSendMailService instance);
    partial void DeleteLogSendMailService(LogSendMailService instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionFunc(PermissionFunc instance);
    partial void UpdatePermissionFunc(PermissionFunc instance);
    partial void DeletePermissionFunc(PermissionFunc instance);
    partial void InsertResetPassword(ResetPassword instance);
    partial void UpdateResetPassword(ResetPassword instance);
    partial void DeleteResetPassword(ResetPassword instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertStatusApproval(StatusApproval instance);
    partial void UpdateStatusApproval(StatusApproval instance);
    partial void DeleteStatusApproval(StatusApproval instance);
    partial void InsertStatusBorrow(StatusBorrow instance);
    partial void UpdateStatusBorrow(StatusBorrow instance);
    partial void DeleteStatusBorrow(StatusBorrow instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertUniversity(University instance);
    partial void UpdateUniversity(University instance);
    partial void DeleteUniversity(University instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUser_Role(User_Role instance);
    partial void UpdateUser_Role(User_Role instance);
    partial void DeleteUser_Role(User_Role instance);
    partial void InsertUserCertification(UserCertification instance);
    partial void UpdateUserCertification(UserCertification instance);
    partial void DeleteUserCertification(UserCertification instance);
    partial void InsertUserEducation(UserEducation instance);
    partial void UpdateUserEducation(UserEducation instance);
    partial void DeleteUserEducation(UserEducation instance);
    partial void InsertUserLanguage(UserLanguage instance);
    partial void UpdateUserLanguage(UserLanguage instance);
    partial void DeleteUserLanguage(UserLanguage instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::DataAccess.Properties.Settings.Default.SELPORTALConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AllowBorrowDevice> AllowBorrowDevices
		{
			get
			{
				return this.GetTable<AllowBorrowDevice>();
			}
		}
		
		public System.Data.Linq.Table<Approve> Approves
		{
			get
			{
				return this.GetTable<Approve>();
			}
		}
		
		public System.Data.Linq.Table<AwardReward> AwardRewards
		{
			get
			{
				return this.GetTable<AwardReward>();
			}
		}
		
		public System.Data.Linq.Table<Cabinet> Cabinets
		{
			get
			{
				return this.GetTable<Cabinet>();
			}
		}
		
		public System.Data.Linq.Table<CategoryDevice> CategoryDevices
		{
			get
			{
				return this.GetTable<CategoryDevice>();
			}
		}
		
		public System.Data.Linq.Table<CCEmailBorrow> CCEmailBorrows
		{
			get
			{
				return this.GetTable<CCEmailBorrow>();
			}
		}
		
		public System.Data.Linq.Table<DataCertification> DataCertifications
		{
			get
			{
				return this.GetTable<DataCertification>();
			}
		}
		
		public System.Data.Linq.Table<DataConfig> DataConfigs
		{
			get
			{
				return this.GetTable<DataConfig>();
			}
		}
		
		public System.Data.Linq.Table<DataLanguage> DataLanguages
		{
			get
			{
				return this.GetTable<DataLanguage>();
			}
		}
		
		public System.Data.Linq.Table<DestroyPlan> DestroyPlans
		{
			get
			{
				return this.GetTable<DestroyPlan>();
			}
		}
		
		public System.Data.Linq.Table<DestroyPlan_Device> DestroyPlan_Devices
		{
			get
			{
				return this.GetTable<DestroyPlan_Device>();
			}
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<DeviceManager> DeviceManagers
		{
			get
			{
				return this.GetTable<DeviceManager>();
			}
		}
		
		public System.Data.Linq.Table<DeviceModel> DeviceModels
		{
			get
			{
				return this.GetTable<DeviceModel>();
			}
		}
		
		public System.Data.Linq.Table<DeviceNotice> DeviceNotices
		{
			get
			{
				return this.GetTable<DeviceNotice>();
			}
		}
		
		public System.Data.Linq.Table<EducationLevel> EducationLevels
		{
			get
			{
				return this.GetTable<EducationLevel>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryUserDevice> InventoryUserDevices
		{
			get
			{
				return this.GetTable<InventoryUserDevice>();
			}
		}
		
		public System.Data.Linq.Table<JobTitle> JobTitles
		{
			get
			{
				return this.GetTable<JobTitle>();
			}
		}
		
		public System.Data.Linq.Table<Layout> Layouts
		{
			get
			{
				return this.GetTable<Layout>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<LocationForTeam> LocationForTeams
		{
			get
			{
				return this.GetTable<LocationForTeam>();
			}
		}
		
		public System.Data.Linq.Table<LocationForUser> LocationForUsers
		{
			get
			{
				return this.GetTable<LocationForUser>();
			}
		}
		
		public System.Data.Linq.Table<LogSendMailService> LogSendMailServices
		{
			get
			{
				return this.GetTable<LogSendMailService>();
			}
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionFunc> PermissionFuncs
		{
			get
			{
				return this.GetTable<PermissionFunc>();
			}
		}
		
		public System.Data.Linq.Table<ResetPassword> ResetPasswords
		{
			get
			{
				return this.GetTable<ResetPassword>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<StatusApproval> StatusApprovals
		{
			get
			{
				return this.GetTable<StatusApproval>();
			}
		}
		
		public System.Data.Linq.Table<StatusBorrow> StatusBorrows
		{
			get
			{
				return this.GetTable<StatusBorrow>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<University> Universities
		{
			get
			{
				return this.GetTable<University>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<User_Role> User_Roles
		{
			get
			{
				return this.GetTable<User_Role>();
			}
		}
		
		public System.Data.Linq.Table<UserCertification> UserCertifications
		{
			get
			{
				return this.GetTable<UserCertification>();
			}
		}
		
		public System.Data.Linq.Table<UserEducation> UserEducations
		{
			get
			{
				return this.GetTable<UserEducation>();
			}
		}
		
		public System.Data.Linq.Table<UserLanguage> UserLanguages
		{
			get
			{
				return this.GetTable<UserLanguage>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AllowBorrowDevice")]
	public partial class AllowBorrowDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private System.DateTime _ApplyDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnApplyDateChanging(System.DateTime value);
    partial void OnApplyDateChanged();
    #endregion
		
		public AllowBorrowDevice()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyDate", DbType="Date NOT NULL")]
		public System.DateTime ApplyDate
		{
			get
			{
				return this._ApplyDate;
			}
			set
			{
				if ((this._ApplyDate != value))
				{
					this.OnApplyDateChanging(value);
					this.SendPropertyChanging();
					this._ApplyDate = value;
					this.SendPropertyChanged("ApplyDate");
					this.OnApplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AllowBorrowDevice", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AllowBorrowDevice = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AllowBorrowDevice = this;
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Approve")]
	public partial class Approve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDApprove;
		
		private int _IDDevice;
		
		private System.DateTime _SubmitDate;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _UserBorrow;
		
		private string _Manager;
		
		private string _Borrower;
		
		private int _StatusManager;
		
		private int _StatusKeeper;
		
		private string _Reason;
		
		private int _StatusBorrow;
		
		private int _StatusDevice;
		
		private bool _AllowShowManager;
		
		private bool _AllowShowKeeper;
		
		private System.Nullable<bool> _AllowShowUserBorrow;
		
		private int _TypeApprove;
		
		private EntityRef<Device> _Device;
		
		private EntityRef<Status> _Status;
		
		private EntityRef<StatusApproval> _StatusApproval;
		
		private EntityRef<StatusApproval> _StatusApproval1;
		
		private EntityRef<StatusBorrow> _StatusBorrow1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDApproveChanging(int value);
    partial void OnIDApproveChanged();
    partial void OnIDDeviceChanging(int value);
    partial void OnIDDeviceChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnUserBorrowChanging(string value);
    partial void OnUserBorrowChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    partial void OnBorrowerChanging(string value);
    partial void OnBorrowerChanged();
    partial void OnStatusManagerChanging(int value);
    partial void OnStatusManagerChanged();
    partial void OnStatusKeeperChanging(int value);
    partial void OnStatusKeeperChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnStatusBorrowChanging(int value);
    partial void OnStatusBorrowChanged();
    partial void OnStatusDeviceChanging(int value);
    partial void OnStatusDeviceChanged();
    partial void OnAllowShowManagerChanging(bool value);
    partial void OnAllowShowManagerChanged();
    partial void OnAllowShowKeeperChanging(bool value);
    partial void OnAllowShowKeeperChanged();
    partial void OnAllowShowUserBorrowChanging(System.Nullable<bool> value);
    partial void OnAllowShowUserBorrowChanged();
    partial void OnTypeApproveChanging(int value);
    partial void OnTypeApproveChanged();
    #endregion
		
		public Approve()
		{
			this._Device = default(EntityRef<Device>);
			this._Status = default(EntityRef<Status>);
			this._StatusApproval = default(EntityRef<StatusApproval>);
			this._StatusApproval1 = default(EntityRef<StatusApproval>);
			this._StatusBorrow1 = default(EntityRef<StatusBorrow>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDApprove", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDApprove
		{
			get
			{
				return this._IDApprove;
			}
			set
			{
				if ((this._IDApprove != value))
				{
					this.OnIDApproveChanging(value);
					this.SendPropertyChanging();
					this._IDApprove = value;
					this.SendPropertyChanged("IDApprove");
					this.OnIDApproveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDevice", DbType="Int NOT NULL")]
		public int IDDevice
		{
			get
			{
				return this._IDDevice;
			}
			set
			{
				if ((this._IDDevice != value))
				{
					if (this._Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDeviceChanging(value);
					this.SendPropertyChanging();
					this._IDDevice = value;
					this.SendPropertyChanged("IDDevice");
					this.OnIDDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBorrow", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserBorrow
		{
			get
			{
				return this._UserBorrow;
			}
			set
			{
				if ((this._UserBorrow != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBorrowChanging(value);
					this.SendPropertyChanging();
					this._UserBorrow = value;
					this.SendPropertyChanged("UserBorrow");
					this.OnUserBorrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrower", DbType="NVarChar(50)")]
		public string Borrower
		{
			get
			{
				return this._Borrower;
			}
			set
			{
				if ((this._Borrower != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowerChanging(value);
					this.SendPropertyChanging();
					this._Borrower = value;
					this.SendPropertyChanged("Borrower");
					this.OnBorrowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusManager", DbType="Int NOT NULL")]
		public int StatusManager
		{
			get
			{
				return this._StatusManager;
			}
			set
			{
				if ((this._StatusManager != value))
				{
					if (this._StatusApproval.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusManagerChanging(value);
					this.SendPropertyChanging();
					this._StatusManager = value;
					this.SendPropertyChanged("StatusManager");
					this.OnStatusManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusKeeper", DbType="Int NOT NULL")]
		public int StatusKeeper
		{
			get
			{
				return this._StatusKeeper;
			}
			set
			{
				if ((this._StatusKeeper != value))
				{
					if (this._StatusApproval1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusKeeperChanging(value);
					this.SendPropertyChanging();
					this._StatusKeeper = value;
					this.SendPropertyChanged("StatusKeeper");
					this.OnStatusKeeperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusBorrow", DbType="Int NOT NULL")]
		public int StatusBorrow
		{
			get
			{
				return this._StatusBorrow;
			}
			set
			{
				if ((this._StatusBorrow != value))
				{
					if (this._StatusBorrow1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusBorrowChanging(value);
					this.SendPropertyChanging();
					this._StatusBorrow = value;
					this.SendPropertyChanged("StatusBorrow");
					this.OnStatusBorrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDevice", DbType="Int NOT NULL")]
		public int StatusDevice
		{
			get
			{
				return this._StatusDevice;
			}
			set
			{
				if ((this._StatusDevice != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusDeviceChanging(value);
					this.SendPropertyChanging();
					this._StatusDevice = value;
					this.SendPropertyChanged("StatusDevice");
					this.OnStatusDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowShowManager", DbType="Bit NOT NULL")]
		public bool AllowShowManager
		{
			get
			{
				return this._AllowShowManager;
			}
			set
			{
				if ((this._AllowShowManager != value))
				{
					this.OnAllowShowManagerChanging(value);
					this.SendPropertyChanging();
					this._AllowShowManager = value;
					this.SendPropertyChanged("AllowShowManager");
					this.OnAllowShowManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowShowKeeper", DbType="Bit NOT NULL")]
		public bool AllowShowKeeper
		{
			get
			{
				return this._AllowShowKeeper;
			}
			set
			{
				if ((this._AllowShowKeeper != value))
				{
					this.OnAllowShowKeeperChanging(value);
					this.SendPropertyChanging();
					this._AllowShowKeeper = value;
					this.SendPropertyChanged("AllowShowKeeper");
					this.OnAllowShowKeeperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowShowUserBorrow", DbType="Bit")]
		public System.Nullable<bool> AllowShowUserBorrow
		{
			get
			{
				return this._AllowShowUserBorrow;
			}
			set
			{
				if ((this._AllowShowUserBorrow != value))
				{
					this.OnAllowShowUserBorrowChanging(value);
					this.SendPropertyChanging();
					this._AllowShowUserBorrow = value;
					this.SendPropertyChanged("AllowShowUserBorrow");
					this.OnAllowShowUserBorrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeApprove", DbType="Int NOT NULL")]
		public int TypeApprove
		{
			get
			{
				return this._TypeApprove;
			}
			set
			{
				if ((this._TypeApprove != value))
				{
					this.OnTypeApproveChanging(value);
					this.SendPropertyChanging();
					this._TypeApprove = value;
					this.SendPropertyChanged("TypeApprove");
					this.OnTypeApproveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_Approve", Storage="_Device", ThisKey="IDDevice", OtherKey="IDDevice", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Device Device
		{
			get
			{
				return this._Device.Entity;
			}
			set
			{
				Device previousValue = this._Device.Entity;
				if (((previousValue != value) 
							|| (this._Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Device.Entity = null;
						previousValue.Approves.Remove(this);
					}
					this._Device.Entity = value;
					if ((value != null))
					{
						value.Approves.Add(this);
						this._IDDevice = value.IDDevice;
					}
					else
					{
						this._IDDevice = default(int);
					}
					this.SendPropertyChanged("Device");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Approve", Storage="_Status", ThisKey="StatusDevice", OtherKey="ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Approves.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Approves.Add(this);
						this._StatusDevice = value.ID;
					}
					else
					{
						this._StatusDevice = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusApproval_Approve", Storage="_StatusApproval", ThisKey="StatusManager", OtherKey="ID", IsForeignKey=true)]
		public StatusApproval StatusApproval
		{
			get
			{
				return this._StatusApproval.Entity;
			}
			set
			{
				StatusApproval previousValue = this._StatusApproval.Entity;
				if (((previousValue != value) 
							|| (this._StatusApproval.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusApproval.Entity = null;
						previousValue.Approves.Remove(this);
					}
					this._StatusApproval.Entity = value;
					if ((value != null))
					{
						value.Approves.Add(this);
						this._StatusManager = value.ID;
					}
					else
					{
						this._StatusManager = default(int);
					}
					this.SendPropertyChanged("StatusApproval");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusApproval_Approve1", Storage="_StatusApproval1", ThisKey="StatusKeeper", OtherKey="ID", IsForeignKey=true)]
		public StatusApproval StatusApproval1
		{
			get
			{
				return this._StatusApproval1.Entity;
			}
			set
			{
				StatusApproval previousValue = this._StatusApproval1.Entity;
				if (((previousValue != value) 
							|| (this._StatusApproval1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusApproval1.Entity = null;
						previousValue.Approves1.Remove(this);
					}
					this._StatusApproval1.Entity = value;
					if ((value != null))
					{
						value.Approves1.Add(this);
						this._StatusKeeper = value.ID;
					}
					else
					{
						this._StatusKeeper = default(int);
					}
					this.SendPropertyChanged("StatusApproval1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusBorrow_Approve", Storage="_StatusBorrow1", ThisKey="StatusBorrow", OtherKey="ID", IsForeignKey=true)]
		public StatusBorrow StatusBorrow1
		{
			get
			{
				return this._StatusBorrow1.Entity;
			}
			set
			{
				StatusBorrow previousValue = this._StatusBorrow1.Entity;
				if (((previousValue != value) 
							|| (this._StatusBorrow1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusBorrow1.Entity = null;
						previousValue.Approves.Remove(this);
					}
					this._StatusBorrow1.Entity = value;
					if ((value != null))
					{
						value.Approves.Add(this);
						this._StatusBorrow = value.ID;
					}
					else
					{
						this._StatusBorrow = default(int);
					}
					this.SendPropertyChanged("StatusBorrow1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve", Storage="_User", ThisKey="UserBorrow", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Approves.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Approves.Add(this);
						this._UserBorrow = value.UserName;
					}
					else
					{
						this._UserBorrow = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve1", Storage="_User1", ThisKey="Manager", OtherKey="UserName", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Approves1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Approves1.Add(this);
						this._Manager = value.UserName;
					}
					else
					{
						this._Manager = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve2", Storage="_User2", ThisKey="Borrower", OtherKey="UserName", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.Approves2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.Approves2.Add(this);
						this._Borrower = value.UserName;
					}
					else
					{
						this._Borrower = default(string);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AwardReward")]
	public partial class AwardReward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _IssueDate;
		
		private string _AwardBy;
		
		private string _Content;
		
		private string _UserName;
		
		private int _Type;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnAwardByChanging(string value);
    partial void OnAwardByChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public AwardReward()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AwardBy
		{
			get
			{
				return this._AwardBy;
			}
			set
			{
				if ((this._AwardBy != value))
				{
					this.OnAwardByChanging(value);
					this.SendPropertyChanging();
					this._AwardBy = value;
					this.SendPropertyChanged("AwardBy");
					this.OnAwardByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AwardReward", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AwardRewards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AwardRewards.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cabinet")]
	public partial class Cabinet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Place;
		
		private bool _Status;
		
		private EntitySet<Device> _Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Cabinet()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="NVarChar(255)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cabinet_Device", Storage="_Devices", ThisKey="ID", OtherKey="Cabinet")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Cabinet1 = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Cabinet1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryDevice")]
	public partial class CategoryDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<CCEmailBorrow> _CCEmailBorrows;
		
		private EntitySet<DeviceModel> _DeviceModels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CategoryDevice()
		{
			this._CCEmailBorrows = new EntitySet<CCEmailBorrow>(new Action<CCEmailBorrow>(this.attach_CCEmailBorrows), new Action<CCEmailBorrow>(this.detach_CCEmailBorrows));
			this._DeviceModels = new EntitySet<DeviceModel>(new Action<DeviceModel>(this.attach_DeviceModels), new Action<DeviceModel>(this.detach_DeviceModels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDevice_CCEmailBorrow", Storage="_CCEmailBorrows", ThisKey="ID", OtherKey="Category")]
		public EntitySet<CCEmailBorrow> CCEmailBorrows
		{
			get
			{
				return this._CCEmailBorrows;
			}
			set
			{
				this._CCEmailBorrows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDevice_DeviceModel", Storage="_DeviceModels", ThisKey="ID", OtherKey="Category")]
		public EntitySet<DeviceModel> DeviceModels
		{
			get
			{
				return this._DeviceModels;
			}
			set
			{
				this._DeviceModels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CCEmailBorrows(CCEmailBorrow entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDevice = this;
		}
		
		private void detach_CCEmailBorrows(CCEmailBorrow entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDevice = null;
		}
		
		private void attach_DeviceModels(DeviceModel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDevice = this;
		}
		
		private void detach_DeviceModels(DeviceModel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CCEmailBorrow")]
	public partial class CCEmailBorrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Category;
		
		private string _UserName;
		
		private EntityRef<CategoryDevice> _CategoryDevice;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public CCEmailBorrow()
		{
			this._CategoryDevice = default(EntityRef<CategoryDevice>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					if (this._CategoryDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDevice_CCEmailBorrow", Storage="_CategoryDevice", ThisKey="Category", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CategoryDevice CategoryDevice
		{
			get
			{
				return this._CategoryDevice.Entity;
			}
			set
			{
				CategoryDevice previousValue = this._CategoryDevice.Entity;
				if (((previousValue != value) 
							|| (this._CategoryDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryDevice.Entity = null;
						previousValue.CCEmailBorrows.Remove(this);
					}
					this._CategoryDevice.Entity = value;
					if ((value != null))
					{
						value.CCEmailBorrows.Add(this);
						this._Category = value.ID;
					}
					else
					{
						this._Category = default(int);
					}
					this.SendPropertyChanged("CategoryDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CCEmailBorrow", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CCEmailBorrows.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CCEmailBorrows.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataCertification")]
	public partial class DataCertification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserCertification> _UserCertifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DataCertification()
		{
			this._UserCertifications = new EntitySet<UserCertification>(new Action<UserCertification>(this.attach_UserCertifications), new Action<UserCertification>(this.detach_UserCertifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataCertification_UserCertification", Storage="_UserCertifications", ThisKey="ID", OtherKey="DataCertificationID")]
		public EntitySet<UserCertification> UserCertifications
		{
			get
			{
				return this._UserCertifications;
			}
			set
			{
				this._UserCertifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCertifications(UserCertification entity)
		{
			this.SendPropertyChanging();
			entity.DataCertification = this;
		}
		
		private void detach_UserCertifications(UserCertification entity)
		{
			this.SendPropertyChanging();
			entity.DataCertification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataConfig")]
	public partial class DataConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DataKey;
		
		private string _DataValue;
		
		private System.DateTime _ApplyDate;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataKeyChanging(string value);
    partial void OnDataKeyChanged();
    partial void OnDataValueChanging(string value);
    partial void OnDataValueChanged();
    partial void OnApplyDateChanging(System.DateTime value);
    partial void OnApplyDateChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public DataConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataKey", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DataKey
		{
			get
			{
				return this._DataKey;
			}
			set
			{
				if ((this._DataKey != value))
				{
					this.OnDataKeyChanging(value);
					this.SendPropertyChanging();
					this._DataKey = value;
					this.SendPropertyChanged("DataKey");
					this.OnDataKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataValue", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DataValue
		{
			get
			{
				return this._DataValue;
			}
			set
			{
				if ((this._DataValue != value))
				{
					this.OnDataValueChanging(value);
					this.SendPropertyChanging();
					this._DataValue = value;
					this.SendPropertyChanged("DataValue");
					this.OnDataValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyDate", DbType="Date NOT NULL")]
		public System.DateTime ApplyDate
		{
			get
			{
				return this._ApplyDate;
			}
			set
			{
				if ((this._ApplyDate != value))
				{
					this.OnApplyDateChanging(value);
					this.SendPropertyChanging();
					this._ApplyDate = value;
					this.SendPropertyChanged("ApplyDate");
					this.OnApplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataLanguage")]
	public partial class DataLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserLanguage> _UserLanguages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DataLanguage()
		{
			this._UserLanguages = new EntitySet<UserLanguage>(new Action<UserLanguage>(this.attach_UserLanguages), new Action<UserLanguage>(this.detach_UserLanguages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataLanguage_UserLanguage", Storage="_UserLanguages", ThisKey="ID", OtherKey="Languageid")]
		public EntitySet<UserLanguage> UserLanguages
		{
			get
			{
				return this._UserLanguages;
			}
			set
			{
				this._UserLanguages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLanguages(UserLanguage entity)
		{
			this.SendPropertyChanging();
			entity.DataLanguage = this;
		}
		
		private void detach_UserLanguages(UserLanguage entity)
		{
			this.SendPropertyChanging();
			entity.DataLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DestroyPlan")]
	public partial class DestroyPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Manager;
		
		private string _PlanName;
		
		private string _Description;
		
		private string _Approver;
		
		private System.DateTime _CreateDate;
		
		private int _ApproveStatus;
		
		private string _ApproveComment;
		
		private System.DateTime _SealDate;
		
		private System.DateTime _DestroyDate;
		
		private int _StatusPlan;
		
		private EntitySet<DestroyPlan_Device> _DestroyPlan_Devices;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnApproverChanging(string value);
    partial void OnApproverChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnApproveStatusChanging(int value);
    partial void OnApproveStatusChanged();
    partial void OnApproveCommentChanging(string value);
    partial void OnApproveCommentChanged();
    partial void OnSealDateChanging(System.DateTime value);
    partial void OnSealDateChanged();
    partial void OnDestroyDateChanging(System.DateTime value);
    partial void OnDestroyDateChanged();
    partial void OnStatusPlanChanging(int value);
    partial void OnStatusPlanChanged();
    #endregion
		
		public DestroyPlan()
		{
			this._DestroyPlan_Devices = new EntitySet<DestroyPlan_Device>(new Action<DestroyPlan_Device>(this.attach_DestroyPlan_Devices), new Action<DestroyPlan_Device>(this.detach_DestroyPlan_Devices));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PlanName
		{
			get
			{
				return this._PlanName;
			}
			set
			{
				if ((this._PlanName != value))
				{
					this.OnPlanNameChanging(value);
					this.SendPropertyChanging();
					this._PlanName = value;
					this.SendPropertyChanged("PlanName");
					this.OnPlanNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approver", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Approver
		{
			get
			{
				return this._Approver;
			}
			set
			{
				if ((this._Approver != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverChanging(value);
					this.SendPropertyChanging();
					this._Approver = value;
					this.SendPropertyChanged("Approver");
					this.OnApproverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveStatus", DbType="Int NOT NULL")]
		public int ApproveStatus
		{
			get
			{
				return this._ApproveStatus;
			}
			set
			{
				if ((this._ApproveStatus != value))
				{
					this.OnApproveStatusChanging(value);
					this.SendPropertyChanging();
					this._ApproveStatus = value;
					this.SendPropertyChanged("ApproveStatus");
					this.OnApproveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveComment", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ApproveComment
		{
			get
			{
				return this._ApproveComment;
			}
			set
			{
				if ((this._ApproveComment != value))
				{
					this.OnApproveCommentChanging(value);
					this.SendPropertyChanging();
					this._ApproveComment = value;
					this.SendPropertyChanged("ApproveComment");
					this.OnApproveCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealDate", DbType="DateTime NOT NULL")]
		public System.DateTime SealDate
		{
			get
			{
				return this._SealDate;
			}
			set
			{
				if ((this._SealDate != value))
				{
					this.OnSealDateChanging(value);
					this.SendPropertyChanging();
					this._SealDate = value;
					this.SendPropertyChanged("SealDate");
					this.OnSealDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestroyDate", DbType="DateTime NOT NULL")]
		public System.DateTime DestroyDate
		{
			get
			{
				return this._DestroyDate;
			}
			set
			{
				if ((this._DestroyDate != value))
				{
					this.OnDestroyDateChanging(value);
					this.SendPropertyChanging();
					this._DestroyDate = value;
					this.SendPropertyChanged("DestroyDate");
					this.OnDestroyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusPlan", DbType="Int NOT NULL")]
		public int StatusPlan
		{
			get
			{
				return this._StatusPlan;
			}
			set
			{
				if ((this._StatusPlan != value))
				{
					this.OnStatusPlanChanging(value);
					this.SendPropertyChanging();
					this._StatusPlan = value;
					this.SendPropertyChanged("StatusPlan");
					this.OnStatusPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DestroyPlan_DestroyPlan_Device", Storage="_DestroyPlan_Devices", ThisKey="ID", OtherKey="DestroyID")]
		public EntitySet<DestroyPlan_Device> DestroyPlan_Devices
		{
			get
			{
				return this._DestroyPlan_Devices;
			}
			set
			{
				this._DestroyPlan_Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DestroyPlan", Storage="_User", ThisKey="Manager", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DestroyPlans.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DestroyPlans.Add(this);
						this._Manager = value.UserName;
					}
					else
					{
						this._Manager = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DestroyPlan1", Storage="_User1", ThisKey="Approver", OtherKey="UserName", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.DestroyPlans1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.DestroyPlans1.Add(this);
						this._Approver = value.UserName;
					}
					else
					{
						this._Approver = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DestroyPlan_Devices(DestroyPlan_Device entity)
		{
			this.SendPropertyChanging();
			entity.DestroyPlan = this;
		}
		
		private void detach_DestroyPlan_Devices(DestroyPlan_Device entity)
		{
			this.SendPropertyChanging();
			entity.DestroyPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DestroyPlan_Device")]
	public partial class DestroyPlan_Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DestroyID;
		
		private int _DeviceID;
		
		private EntityRef<DestroyPlan> _DestroyPlan;
		
		private EntityRef<Device> _Device;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDestroyIDChanging(int value);
    partial void OnDestroyIDChanged();
    partial void OnDeviceIDChanging(int value);
    partial void OnDeviceIDChanged();
    #endregion
		
		public DestroyPlan_Device()
		{
			this._DestroyPlan = default(EntityRef<DestroyPlan>);
			this._Device = default(EntityRef<Device>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestroyID", DbType="Int NOT NULL")]
		public int DestroyID
		{
			get
			{
				return this._DestroyID;
			}
			set
			{
				if ((this._DestroyID != value))
				{
					if (this._DestroyPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestroyIDChanging(value);
					this.SendPropertyChanging();
					this._DestroyID = value;
					this.SendPropertyChanged("DestroyID");
					this.OnDestroyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="Int NOT NULL")]
		public int DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					if (this._Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DestroyPlan_DestroyPlan_Device", Storage="_DestroyPlan", ThisKey="DestroyID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DestroyPlan DestroyPlan
		{
			get
			{
				return this._DestroyPlan.Entity;
			}
			set
			{
				DestroyPlan previousValue = this._DestroyPlan.Entity;
				if (((previousValue != value) 
							|| (this._DestroyPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DestroyPlan.Entity = null;
						previousValue.DestroyPlan_Devices.Remove(this);
					}
					this._DestroyPlan.Entity = value;
					if ((value != null))
					{
						value.DestroyPlan_Devices.Add(this);
						this._DestroyID = value.ID;
					}
					else
					{
						this._DestroyID = default(int);
					}
					this.SendPropertyChanged("DestroyPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DestroyPlan_Device", Storage="_Device", ThisKey="DeviceID", OtherKey="IDDevice", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Device Device
		{
			get
			{
				return this._Device.Entity;
			}
			set
			{
				Device previousValue = this._Device.Entity;
				if (((previousValue != value) 
							|| (this._Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Device.Entity = null;
						previousValue.DestroyPlan_Devices.Remove(this);
					}
					this._Device.Entity = value;
					if ((value != null))
					{
						value.DestroyPlan_Devices.Add(this);
						this._DeviceID = value.IDDevice;
					}
					else
					{
						this._DeviceID = default(int);
					}
					this.SendPropertyChanged("Device");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Device")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDDevice;
		
		private string _Model;
		
		private string _Tag;
		
		private string _Project;
		
		private string _Manager;
		
		private string _Keeper;
		
		private System.Nullable<System.DateTime> _BorrowDate;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private int _StatusDevice;
		
		private string _IMEI;
		
		private string _Serial;
		
		private string _Region;
		
		private string _Version;
		
		private string _Receiver;
		
		private string _From_;
		
		private System.Nullable<System.DateTime> _ReceiveDate;
		
		private string _Borrower;
		
		private string _Note;
		
		private System.Nullable<int> _Cabinet;
		
		private System.Nullable<System.DateTime> _KeepDate;
		
		private string _NewKeeper;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private string _BorrowerNote;
		
		private EntitySet<Approve> _Approves;
		
		private EntitySet<DestroyPlan_Device> _DestroyPlan_Devices;
		
		private EntitySet<InventoryUserDevice> _InventoryUserDevices;
		
		private EntityRef<Cabinet> _Cabinet1;
		
		private EntityRef<DeviceModel> _DeviceModel;
		
		private EntityRef<Status> _Status;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
		private EntityRef<User> _User3;
		
		private EntityRef<User> _User4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDDeviceChanging(int value);
    partial void OnIDDeviceChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnProjectChanging(string value);
    partial void OnProjectChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    partial void OnKeeperChanging(string value);
    partial void OnKeeperChanged();
    partial void OnBorrowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrowDateChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    partial void OnStatusDeviceChanging(int value);
    partial void OnStatusDeviceChanged();
    partial void OnIMEIChanging(string value);
    partial void OnIMEIChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnReceiverChanging(string value);
    partial void OnReceiverChanged();
    partial void OnFrom_Changing(string value);
    partial void OnFrom_Changed();
    partial void OnReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceiveDateChanged();
    partial void OnBorrowerChanging(string value);
    partial void OnBorrowerChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCabinetChanging(System.Nullable<int> value);
    partial void OnCabinetChanged();
    partial void OnKeepDateChanging(System.Nullable<System.DateTime> value);
    partial void OnKeepDateChanged();
    partial void OnNewKeeperChanging(string value);
    partial void OnNewKeeperChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    partial void OnBorrowerNoteChanging(string value);
    partial void OnBorrowerNoteChanged();
    #endregion
		
		public Device()
		{
			this._Approves = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves), new Action<Approve>(this.detach_Approves));
			this._DestroyPlan_Devices = new EntitySet<DestroyPlan_Device>(new Action<DestroyPlan_Device>(this.attach_DestroyPlan_Devices), new Action<DestroyPlan_Device>(this.detach_DestroyPlan_Devices));
			this._InventoryUserDevices = new EntitySet<InventoryUserDevice>(new Action<InventoryUserDevice>(this.attach_InventoryUserDevices), new Action<InventoryUserDevice>(this.detach_InventoryUserDevices));
			this._Cabinet1 = default(EntityRef<Cabinet>);
			this._DeviceModel = default(EntityRef<DeviceModel>);
			this._Status = default(EntityRef<Status>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			this._User3 = default(EntityRef<User>);
			this._User4 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDevice", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDDevice
		{
			get
			{
				return this._IDDevice;
			}
			set
			{
				if ((this._IDDevice != value))
				{
					this.OnIDDeviceChanging(value);
					this.SendPropertyChanging();
					this._IDDevice = value;
					this.SendPropertyChanged("IDDevice");
					this.OnIDDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					if (this._DeviceModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="NVarChar(50)")]
		public string Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keeper", DbType="NVarChar(50)")]
		public string Keeper
		{
			get
			{
				return this._Keeper;
			}
			set
			{
				if ((this._Keeper != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeeperChanging(value);
					this.SendPropertyChanging();
					this._Keeper = value;
					this.SendPropertyChanged("Keeper");
					this.OnKeeperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDate", DbType="Date")]
		public System.Nullable<System.DateTime> BorrowDate
		{
			get
			{
				return this._BorrowDate;
			}
			set
			{
				if ((this._BorrowDate != value))
				{
					this.OnBorrowDateChanging(value);
					this.SendPropertyChanging();
					this._BorrowDate = value;
					this.SendPropertyChanged("BorrowDate");
					this.OnBorrowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDevice", DbType="Int NOT NULL")]
		public int StatusDevice
		{
			get
			{
				return this._StatusDevice;
			}
			set
			{
				if ((this._StatusDevice != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusDeviceChanging(value);
					this.SendPropertyChanging();
					this._StatusDevice = value;
					this.SendPropertyChanged("StatusDevice");
					this.OnStatusDeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMEI", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IMEI
		{
			get
			{
				return this._IMEI;
			}
			set
			{
				if ((this._IMEI != value))
				{
					this.OnIMEIChanging(value);
					this.SendPropertyChanging();
					this._IMEI = value;
					this.SendPropertyChanged("IMEI");
					this.OnIMEIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(50)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receiver", DbType="NVarChar(50)")]
		public string Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_From_", DbType="NVarChar(50)")]
		public string From_
		{
			get
			{
				return this._From_;
			}
			set
			{
				if ((this._From_ != value))
				{
					this.OnFrom_Changing(value);
					this.SendPropertyChanging();
					this._From_ = value;
					this.SendPropertyChanged("From_");
					this.OnFrom_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceiveDate
		{
			get
			{
				return this._ReceiveDate;
			}
			set
			{
				if ((this._ReceiveDate != value))
				{
					this.OnReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiveDate = value;
					this.SendPropertyChanged("ReceiveDate");
					this.OnReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrower", DbType="NVarChar(50)")]
		public string Borrower
		{
			get
			{
				return this._Borrower;
			}
			set
			{
				if ((this._Borrower != value))
				{
					if (this._User3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowerChanging(value);
					this.SendPropertyChanging();
					this._Borrower = value;
					this.SendPropertyChanged("Borrower");
					this.OnBorrowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(300)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cabinet", DbType="Int")]
		public System.Nullable<int> Cabinet
		{
			get
			{
				return this._Cabinet;
			}
			set
			{
				if ((this._Cabinet != value))
				{
					if (this._Cabinet1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCabinetChanging(value);
					this.SendPropertyChanging();
					this._Cabinet = value;
					this.SendPropertyChanged("Cabinet");
					this.OnCabinetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeepDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> KeepDate
		{
			get
			{
				return this._KeepDate;
			}
			set
			{
				if ((this._KeepDate != value))
				{
					this.OnKeepDateChanging(value);
					this.SendPropertyChanging();
					this._KeepDate = value;
					this.SendPropertyChanged("KeepDate");
					this.OnKeepDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewKeeper", DbType="NVarChar(50)")]
		public string NewKeeper
		{
			get
			{
				return this._NewKeeper;
			}
			set
			{
				if ((this._NewKeeper != value))
				{
					if (this._User4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewKeeperChanging(value);
					this.SendPropertyChanging();
					this._NewKeeper = value;
					this.SendPropertyChanged("NewKeeper");
					this.OnNewKeeperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="Date")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowerNote", DbType="NVarChar(MAX)")]
		public string BorrowerNote
		{
			get
			{
				return this._BorrowerNote;
			}
			set
			{
				if ((this._BorrowerNote != value))
				{
					this.OnBorrowerNoteChanging(value);
					this.SendPropertyChanging();
					this._BorrowerNote = value;
					this.SendPropertyChanged("BorrowerNote");
					this.OnBorrowerNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_Approve", Storage="_Approves", ThisKey="IDDevice", OtherKey="IDDevice")]
		public EntitySet<Approve> Approves
		{
			get
			{
				return this._Approves;
			}
			set
			{
				this._Approves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DestroyPlan_Device", Storage="_DestroyPlan_Devices", ThisKey="IDDevice", OtherKey="DeviceID")]
		public EntitySet<DestroyPlan_Device> DestroyPlan_Devices
		{
			get
			{
				return this._DestroyPlan_Devices;
			}
			set
			{
				this._DestroyPlan_Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_InventoryUserDevice", Storage="_InventoryUserDevices", ThisKey="IDDevice", OtherKey="DeviceID")]
		public EntitySet<InventoryUserDevice> InventoryUserDevices
		{
			get
			{
				return this._InventoryUserDevices;
			}
			set
			{
				this._InventoryUserDevices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cabinet_Device", Storage="_Cabinet1", ThisKey="Cabinet", OtherKey="ID", IsForeignKey=true)]
		public Cabinet Cabinet1
		{
			get
			{
				return this._Cabinet1.Entity;
			}
			set
			{
				Cabinet previousValue = this._Cabinet1.Entity;
				if (((previousValue != value) 
							|| (this._Cabinet1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cabinet1.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._Cabinet1.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._Cabinet = value.ID;
					}
					else
					{
						this._Cabinet = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cabinet1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceModel_Device", Storage="_DeviceModel", ThisKey="Model", OtherKey="ModelName", IsForeignKey=true)]
		public DeviceModel DeviceModel
		{
			get
			{
				return this._DeviceModel.Entity;
			}
			set
			{
				DeviceModel previousValue = this._DeviceModel.Entity;
				if (((previousValue != value) 
							|| (this._DeviceModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceModel.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._DeviceModel.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._Model = value.ModelName;
					}
					else
					{
						this._Model = default(string);
					}
					this.SendPropertyChanged("DeviceModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Device", Storage="_Status", ThisKey="StatusDevice", OtherKey="ID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._StatusDevice = value.ID;
					}
					else
					{
						this._StatusDevice = default(int);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_User", ThisKey="Manager", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._Manager = value.UserName;
					}
					else
					{
						this._Manager = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device1", Storage="_User1", ThisKey="Keeper", OtherKey="UserName", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Devices1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Devices1.Add(this);
						this._Keeper = value.UserName;
					}
					else
					{
						this._Keeper = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device2", Storage="_User2", ThisKey="Receiver", OtherKey="UserName", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.Devices2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.Devices2.Add(this);
						this._Receiver = value.UserName;
					}
					else
					{
						this._Receiver = default(string);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device3", Storage="_User3", ThisKey="Borrower", OtherKey="UserName", IsForeignKey=true)]
		public User User3
		{
			get
			{
				return this._User3.Entity;
			}
			set
			{
				User previousValue = this._User3.Entity;
				if (((previousValue != value) 
							|| (this._User3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User3.Entity = null;
						previousValue.Devices3.Remove(this);
					}
					this._User3.Entity = value;
					if ((value != null))
					{
						value.Devices3.Add(this);
						this._Borrower = value.UserName;
					}
					else
					{
						this._Borrower = default(string);
					}
					this.SendPropertyChanged("User3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device4", Storage="_User4", ThisKey="NewKeeper", OtherKey="UserName", IsForeignKey=true)]
		public User User4
		{
			get
			{
				return this._User4.Entity;
			}
			set
			{
				User previousValue = this._User4.Entity;
				if (((previousValue != value) 
							|| (this._User4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User4.Entity = null;
						previousValue.Devices4.Remove(this);
					}
					this._User4.Entity = value;
					if ((value != null))
					{
						value.Devices4.Add(this);
						this._NewKeeper = value.UserName;
					}
					else
					{
						this._NewKeeper = default(string);
					}
					this.SendPropertyChanged("User4");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.Device = this;
		}
		
		private void detach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.Device = null;
		}
		
		private void attach_DestroyPlan_Devices(DestroyPlan_Device entity)
		{
			this.SendPropertyChanging();
			entity.Device = this;
		}
		
		private void detach_DestroyPlan_Devices(DestroyPlan_Device entity)
		{
			this.SendPropertyChanging();
			entity.Device = null;
		}
		
		private void attach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.Device = this;
		}
		
		private void detach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.Device = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceManager")]
	public partial class DeviceManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private System.DateTime _ApplyDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnApplyDateChanging(System.DateTime value);
    partial void OnApplyDateChanged();
    #endregion
		
		public DeviceManager()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyDate", DbType="Date NOT NULL")]
		public System.DateTime ApplyDate
		{
			get
			{
				return this._ApplyDate;
			}
			set
			{
				if ((this._ApplyDate != value))
				{
					this.OnApplyDateChanging(value);
					this.SendPropertyChanging();
					this._ApplyDate = value;
					this.SendPropertyChanged("ApplyDate");
					this.OnApplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeviceManager", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DeviceManager = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DeviceManager = this;
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceModel")]
	public partial class DeviceModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ModelName;
		
		private int _Category;
		
		private string _Company;
		
		private EntitySet<Device> _Devices;
		
		private EntityRef<CategoryDevice> _CategoryDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    #endregion
		
		public DeviceModel()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			this._CategoryDevice = default(EntityRef<CategoryDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					if (this._CategoryDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(50)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceModel_Device", Storage="_Devices", ThisKey="ModelName", OtherKey="Model")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDevice_DeviceModel", Storage="_CategoryDevice", ThisKey="Category", OtherKey="ID", IsForeignKey=true)]
		public CategoryDevice CategoryDevice
		{
			get
			{
				return this._CategoryDevice.Entity;
			}
			set
			{
				CategoryDevice previousValue = this._CategoryDevice.Entity;
				if (((previousValue != value) 
							|| (this._CategoryDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryDevice.Entity = null;
						previousValue.DeviceModels.Remove(this);
					}
					this._CategoryDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceModels.Add(this);
						this._Category = value.ID;
					}
					else
					{
						this._Category = default(int);
					}
					this.SendPropertyChanged("CategoryDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.DeviceModel = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.DeviceModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceNotice")]
	public partial class DeviceNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private string _Content;
		
		private string _CreateBy;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreateByChanging(string value);
    partial void OnCreateByChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public DeviceNotice()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeviceNotice", Storage="_User", ThisKey="CreateBy", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DeviceNotices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DeviceNotices.Add(this);
						this._CreateBy = value.UserName;
					}
					else
					{
						this._CreateBy = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationLevel")]
	public partial class EducationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Level;
		
		private string _Description;
		
		private EntitySet<UserEducation> _UserEducations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLevelChanging(string value);
    partial void OnLevelChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EducationLevel()
		{
			this._UserEducations = new EntitySet<UserEducation>(new Action<UserEducation>(this.attach_UserEducations), new Action<UserEducation>(this.detach_UserEducations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationLevel_UserEducation", Storage="_UserEducations", ThisKey="ID", OtherKey="EducationLevel")]
		public EntitySet<UserEducation> UserEducations
		{
			get
			{
				return this._UserEducations;
			}
			set
			{
				this._UserEducations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.EducationLevel1 = this;
		}
		
		private void detach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.EducationLevel1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _RequestBy;
		
		private System.DateTime _RequestDate;
		
		private string _InventoryName;
		
		private EntitySet<InventoryUserDevice> _InventoryUserDevices;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnRequestByChanging(string value);
    partial void OnRequestByChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnInventoryNameChanging(string value);
    partial void OnInventoryNameChanged();
    #endregion
		
		public Inventory()
		{
			this._InventoryUserDevices = new EntitySet<InventoryUserDevice>(new Action<InventoryUserDevice>(this.attach_InventoryUserDevices), new Action<InventoryUserDevice>(this.detach_InventoryUserDevices));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RequestBy
		{
			get
			{
				return this._RequestBy;
			}
			set
			{
				if ((this._RequestBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestByChanging(value);
					this.SendPropertyChanging();
					this._RequestBy = value;
					this.SendPropertyChanged("RequestBy");
					this.OnRequestByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string InventoryName
		{
			get
			{
				return this._InventoryName;
			}
			set
			{
				if ((this._InventoryName != value))
				{
					this.OnInventoryNameChanging(value);
					this.SendPropertyChanging();
					this._InventoryName = value;
					this.SendPropertyChanged("InventoryName");
					this.OnInventoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryUserDevice", Storage="_InventoryUserDevices", ThisKey="id", OtherKey="InventoryID")]
		public EntitySet<InventoryUserDevice> InventoryUserDevices
		{
			get
			{
				return this._InventoryUserDevices;
			}
			set
			{
				this._InventoryUserDevices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Inventory", Storage="_User", ThisKey="RequestBy", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._RequestBy = value.UserName;
					}
					else
					{
						this._RequestBy = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryUserDevice")]
	public partial class InventoryUserDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _InventoryID;
		
		private int _DeviceID;
		
		private string _Borrower;
		
		private string _Keeper;
		
		private int _ConfirmStatus;
		
		private string _Reason;
		
		private System.Nullable<System.DateTime> _BorrowDate;
		
		private int _LeaderConfirmStatus;
		
		private string _LeaderReasonReject;
		
		private EntityRef<Device> _Device;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnInventoryIDChanging(int value);
    partial void OnInventoryIDChanged();
    partial void OnDeviceIDChanging(int value);
    partial void OnDeviceIDChanged();
    partial void OnBorrowerChanging(string value);
    partial void OnBorrowerChanged();
    partial void OnKeeperChanging(string value);
    partial void OnKeeperChanged();
    partial void OnConfirmStatusChanging(int value);
    partial void OnConfirmStatusChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnBorrowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrowDateChanged();
    partial void OnLeaderConfirmStatusChanging(int value);
    partial void OnLeaderConfirmStatusChanged();
    partial void OnLeaderReasonRejectChanging(string value);
    partial void OnLeaderReasonRejectChanged();
    #endregion
		
		public InventoryUserDevice()
		{
			this._Device = default(EntityRef<Device>);
			this._Inventory = default(EntityRef<Inventory>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryID", DbType="Int NOT NULL")]
		public int InventoryID
		{
			get
			{
				return this._InventoryID;
			}
			set
			{
				if ((this._InventoryID != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIDChanging(value);
					this.SendPropertyChanging();
					this._InventoryID = value;
					this.SendPropertyChanged("InventoryID");
					this.OnInventoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="Int NOT NULL")]
		public int DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					if (this._Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrower", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Borrower
		{
			get
			{
				return this._Borrower;
			}
			set
			{
				if ((this._Borrower != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrowerChanging(value);
					this.SendPropertyChanging();
					this._Borrower = value;
					this.SendPropertyChanged("Borrower");
					this.OnBorrowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keeper", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Keeper
		{
			get
			{
				return this._Keeper;
			}
			set
			{
				if ((this._Keeper != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeeperChanging(value);
					this.SendPropertyChanging();
					this._Keeper = value;
					this.SendPropertyChanged("Keeper");
					this.OnKeeperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmStatus", DbType="Int NOT NULL")]
		public int ConfirmStatus
		{
			get
			{
				return this._ConfirmStatus;
			}
			set
			{
				if ((this._ConfirmStatus != value))
				{
					this.OnConfirmStatusChanging(value);
					this.SendPropertyChanging();
					this._ConfirmStatus = value;
					this.SendPropertyChanged("ConfirmStatus");
					this.OnConfirmStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(255)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BorrowDate
		{
			get
			{
				return this._BorrowDate;
			}
			set
			{
				if ((this._BorrowDate != value))
				{
					this.OnBorrowDateChanging(value);
					this.SendPropertyChanging();
					this._BorrowDate = value;
					this.SendPropertyChanged("BorrowDate");
					this.OnBorrowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderConfirmStatus", DbType="Int NOT NULL")]
		public int LeaderConfirmStatus
		{
			get
			{
				return this._LeaderConfirmStatus;
			}
			set
			{
				if ((this._LeaderConfirmStatus != value))
				{
					this.OnLeaderConfirmStatusChanging(value);
					this.SendPropertyChanging();
					this._LeaderConfirmStatus = value;
					this.SendPropertyChanged("LeaderConfirmStatus");
					this.OnLeaderConfirmStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeaderReasonReject", DbType="NVarChar(255)")]
		public string LeaderReasonReject
		{
			get
			{
				return this._LeaderReasonReject;
			}
			set
			{
				if ((this._LeaderReasonReject != value))
				{
					this.OnLeaderReasonRejectChanging(value);
					this.SendPropertyChanging();
					this._LeaderReasonReject = value;
					this.SendPropertyChanged("LeaderReasonReject");
					this.OnLeaderReasonRejectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_InventoryUserDevice", Storage="_Device", ThisKey="DeviceID", OtherKey="IDDevice", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Device Device
		{
			get
			{
				return this._Device.Entity;
			}
			set
			{
				Device previousValue = this._Device.Entity;
				if (((previousValue != value) 
							|| (this._Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Device.Entity = null;
						previousValue.InventoryUserDevices.Remove(this);
					}
					this._Device.Entity = value;
					if ((value != null))
					{
						value.InventoryUserDevices.Add(this);
						this._DeviceID = value.IDDevice;
					}
					else
					{
						this._DeviceID = default(int);
					}
					this.SendPropertyChanged("Device");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryUserDevice", Storage="_Inventory", ThisKey="InventoryID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryUserDevices.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryUserDevices.Add(this);
						this._InventoryID = value.id;
					}
					else
					{
						this._InventoryID = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InventoryUserDevice", Storage="_User", ThisKey="Borrower", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.InventoryUserDevices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.InventoryUserDevices.Add(this);
						this._Borrower = value.UserName;
					}
					else
					{
						this._Borrower = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InventoryUserDevice1", Storage="_User1", ThisKey="Keeper", OtherKey="UserName", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.InventoryUserDevices1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.InventoryUserDevices1.Add(this);
						this._Keeper = value.UserName;
					}
					else
					{
						this._Keeper = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTitle")]
	public partial class JobTitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobTitleID;
		
		private string _JobName;
		
		private string _Description;
		
		private int _Order;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobTitleIDChanging(int value);
    partial void OnJobTitleIDChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public JobTitle()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobTitleID
		{
			get
			{
				return this._JobTitleID;
			}
			set
			{
				if ((this._JobTitleID != value))
				{
					this.OnJobTitleIDChanging(value);
					this.SendPropertyChanging();
					this._JobTitleID = value;
					this.SendPropertyChanged("JobTitleID");
					this.OnJobTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(50)")]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_User", Storage="_Users", ThisKey="JobTitleID", OtherKey="JobTitleID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Layout")]
	public partial class Layout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LayoutID;
		
		private string _LayoutName;
		
		private string _Image;
		
		private EntitySet<Location> _Locations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLayoutIDChanging(int value);
    partial void OnLayoutIDChanged();
    partial void OnLayoutNameChanging(string value);
    partial void OnLayoutNameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Layout()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayoutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LayoutID
		{
			get
			{
				return this._LayoutID;
			}
			set
			{
				if ((this._LayoutID != value))
				{
					this.OnLayoutIDChanging(value);
					this.SendPropertyChanging();
					this._LayoutID = value;
					this.SendPropertyChanged("LayoutID");
					this.OnLayoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayoutName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LayoutName
		{
			get
			{
				return this._LayoutName;
			}
			set
			{
				if ((this._LayoutName != value))
				{
					this.OnLayoutNameChanging(value);
					this.SendPropertyChanging();
					this._LayoutName = value;
					this.SendPropertyChanged("LayoutName");
					this.OnLayoutNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Layout_Location", Storage="_Locations", ThisKey="LayoutID", OtherKey="LayoutID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Layout = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Layout = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private System.Nullable<int> _LayoutID;
		
		private string _shape;
		
		private string _coords;
		
		private string _Zone;
		
		private string _Description;
		
		private EntitySet<LocationForTeam> _LocationForTeams;
		
		private EntitySet<LocationForUser> _LocationForUsers;
		
		private EntityRef<Layout> _Layout;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLayoutIDChanging(System.Nullable<int> value);
    partial void OnLayoutIDChanged();
    partial void OnshapeChanging(string value);
    partial void OnshapeChanged();
    partial void OncoordsChanging(string value);
    partial void OncoordsChanged();
    partial void OnZoneChanging(string value);
    partial void OnZoneChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Location()
		{
			this._LocationForTeams = new EntitySet<LocationForTeam>(new Action<LocationForTeam>(this.attach_LocationForTeams), new Action<LocationForTeam>(this.detach_LocationForTeams));
			this._LocationForUsers = new EntitySet<LocationForUser>(new Action<LocationForUser>(this.attach_LocationForUsers), new Action<LocationForUser>(this.detach_LocationForUsers));
			this._Layout = default(EntityRef<Layout>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LayoutID", DbType="Int")]
		public System.Nullable<int> LayoutID
		{
			get
			{
				return this._LayoutID;
			}
			set
			{
				if ((this._LayoutID != value))
				{
					if (this._Layout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLayoutIDChanging(value);
					this.SendPropertyChanging();
					this._LayoutID = value;
					this.SendPropertyChanged("LayoutID");
					this.OnLayoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shape", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string shape
		{
			get
			{
				return this._shape;
			}
			set
			{
				if ((this._shape != value))
				{
					this.OnshapeChanging(value);
					this.SendPropertyChanging();
					this._shape = value;
					this.SendPropertyChanged("shape");
					this.OnshapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coords", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string coords
		{
			get
			{
				return this._coords;
			}
			set
			{
				if ((this._coords != value))
				{
					this.OncoordsChanging(value);
					this.SendPropertyChanging();
					this._coords = value;
					this.SendPropertyChanged("coords");
					this.OncoordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zone", DbType="NVarChar(50)")]
		public string Zone
		{
			get
			{
				return this._Zone;
			}
			set
			{
				if ((this._Zone != value))
				{
					this.OnZoneChanging(value);
					this.SendPropertyChanging();
					this._Zone = value;
					this.SendPropertyChanged("Zone");
					this.OnZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationForTeam", Storage="_LocationForTeams", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<LocationForTeam> LocationForTeams
		{
			get
			{
				return this._LocationForTeams;
			}
			set
			{
				this._LocationForTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationForUser", Storage="_LocationForUsers", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<LocationForUser> LocationForUsers
		{
			get
			{
				return this._LocationForUsers;
			}
			set
			{
				this._LocationForUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Layout_Location", Storage="_Layout", ThisKey="LayoutID", OtherKey="LayoutID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Layout Layout
		{
			get
			{
				return this._Layout.Entity;
			}
			set
			{
				Layout previousValue = this._Layout.Entity;
				if (((previousValue != value) 
							|| (this._Layout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Layout.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Layout.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._LayoutID = value.LayoutID;
					}
					else
					{
						this._LayoutID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Layout");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationForTeams(LocationForTeam entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationForTeams(LocationForTeam entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationForUsers(LocationForUser entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationForUsers(LocationForUser entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationForTeam")]
	public partial class LocationForTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _LocationID;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    #endregion
		
		public LocationForTeam()
		{
			this._Location = default(EntityRef<Location>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationForTeam", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationForTeams.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationForTeams.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_LocationForTeam", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.LocationForTeams.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.LocationForTeams.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationForUser")]
	public partial class LocationForUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private int _LocationID;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    #endregion
		
		public LocationForUser()
		{
			this._Location = default(EntityRef<Location>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationForUser", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationForUsers.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationForUsers.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LocationForUser", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LocationForUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LocationForUsers.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogSendMailService")]
	public partial class LogSendMailService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private System.DateTime _Date;
		
		private string _To;
		
		private string _CC;
		
		private string _Content;
		
		private string _From;
		
		private string _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnToChanging(string value);
    partial void OnToChanged();
    partial void OnCCChanging(string value);
    partial void OnCCChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnFromChanging(string value);
    partial void OnFromChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    #endregion
		
		public LogSendMailService()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CC
		{
			get
			{
				return this._CC;
			}
			set
			{
				if ((this._CC != value))
				{
					this.OnCCChanging(value);
					this.SendPropertyChanging();
					this._CC = value;
					this.SendPropertyChanged("CC");
					this.OnCCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(255)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserEducation> _UserEducations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Major()
		{
			this._UserEducations = new EntitySet<UserEducation>(new Action<UserEducation>(this.attach_UserEducations), new Action<UserEducation>(this.detach_UserEducations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_UserEducation", Storage="_UserEducations", ThisKey="ID", OtherKey="MajorID")]
		public EntitySet<UserEducation> UserEducations
		{
			get
			{
				return this._UserEducations;
			}
			set
			{
				this._UserEducations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Link;
		
		private string _Content;
		
		private string _TypeNotication;
		
		private string _UserName;
		
		private System.DateTime _Date;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTypeNoticationChanging(string value);
    partial void OnTypeNoticationChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Notification()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeNotication", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeNotication
		{
			get
			{
				return this._TypeNotication;
			}
			set
			{
				if ((this._TypeNotication != value))
				{
					this.OnTypeNoticationChanging(value);
					this.SendPropertyChanging();
					this._TypeNotication = value;
					this.SendPropertyChanged("TypeNotication");
					this.OnTypeNoticationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Permission()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_User", Storage="_Users", ThisKey="id", OtherKey="PermissionId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionFunc")]
	public partial class PermissionFunc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionFuncID;
		
		private string _FunctionName;
		
		private EntitySet<UserPermission> _UserPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionFuncIDChanging(int value);
    partial void OnPermissionFuncIDChanged();
    partial void OnFunctionNameChanging(string value);
    partial void OnFunctionNameChanged();
    #endregion
		
		public PermissionFunc()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionFuncID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionFuncID
		{
			get
			{
				return this._PermissionFuncID;
			}
			set
			{
				if ((this._PermissionFuncID != value))
				{
					this.OnPermissionFuncIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionFuncID = value;
					this.SendPropertyChanged("PermissionFuncID");
					this.OnPermissionFuncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionName", DbType="NVarChar(100)")]
		public string FunctionName
		{
			get
			{
				return this._FunctionName;
			}
			set
			{
				if ((this._FunctionName != value))
				{
					this.OnFunctionNameChanging(value);
					this.SendPropertyChanging();
					this._FunctionName = value;
					this.SendPropertyChanged("FunctionName");
					this.OnFunctionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionFunc_UserPermission", Storage="_UserPermissions", ThisKey="PermissionFuncID", OtherKey="PermissionFuncID")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionFunc = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionFunc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResetPassword")]
	public partial class ResetPassword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Token;
		
		private System.DateTime _TimeExpiration;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnTimeExpirationChanging(System.DateTime value);
    partial void OnTimeExpirationChanged();
    #endregion
		
		public ResetPassword()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Token", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeExpiration", DbType="DateTime NOT NULL")]
		public System.DateTime TimeExpiration
		{
			get
			{
				return this._TimeExpiration;
			}
			set
			{
				if ((this._TimeExpiration != value))
				{
					this.OnTimeExpirationChanging(value);
					this.SendPropertyChanging();
					this._TimeExpiration = value;
					this.SendPropertyChanged("TimeExpiration");
					this.OnTimeExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ResetPassword", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ResetPassword = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ResetPassword = this;
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RoleCode;
		
		private string _Description;
		
		private EntitySet<User_Role> _User_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleCodeChanging(string value);
    partial void OnRoleCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._User_Roles = new EntitySet<User_Role>(new Action<User_Role>(this.attach_User_Roles), new Action<User_Role>(this.detach_User_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string RoleCode
		{
			get
			{
				return this._RoleCode;
			}
			set
			{
				if ((this._RoleCode != value))
				{
					this.OnRoleCodeChanging(value);
					this.SendPropertyChanging();
					this._RoleCode = value;
					this.SendPropertyChanged("RoleCode");
					this.OnRoleCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_Role", Storage="_User_Roles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<User_Role> User_Roles
		{
			get
			{
				return this._User_Roles;
			}
			set
			{
				this._User_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Approve> _Approves;
		
		private EntitySet<Device> _Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Status()
		{
			this._Approves = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves), new Action<Approve>(this.detach_Approves));
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Approve", Storage="_Approves", ThisKey="ID", OtherKey="StatusDevice")]
		public EntitySet<Approve> Approves
		{
			get
			{
				return this._Approves;
			}
			set
			{
				this._Approves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Device", Storage="_Devices", ThisKey="ID", OtherKey="StatusDevice")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusApproval")]
	public partial class StatusApproval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Approve> _Approves;
		
		private EntitySet<Approve> _Approves1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public StatusApproval()
		{
			this._Approves = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves), new Action<Approve>(this.detach_Approves));
			this._Approves1 = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves1), new Action<Approve>(this.detach_Approves1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusApproval_Approve", Storage="_Approves", ThisKey="ID", OtherKey="StatusManager")]
		public EntitySet<Approve> Approves
		{
			get
			{
				return this._Approves;
			}
			set
			{
				this._Approves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusApproval_Approve1", Storage="_Approves1", ThisKey="ID", OtherKey="StatusKeeper")]
		public EntitySet<Approve> Approves1
		{
			get
			{
				return this._Approves1;
			}
			set
			{
				this._Approves1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusApproval = this;
		}
		
		private void detach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusApproval = null;
		}
		
		private void attach_Approves1(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusApproval1 = this;
		}
		
		private void detach_Approves1(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusApproval1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusBorrow")]
	public partial class StatusBorrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Approve> _Approves;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public StatusBorrow()
		{
			this._Approves = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves), new Action<Approve>(this.detach_Approves));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusBorrow_Approve", Storage="_Approves", ThisKey="ID", OtherKey="StatusBorrow")]
		public EntitySet<Approve> Approves
		{
			get
			{
				return this._Approves;
			}
			set
			{
				this._Approves.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusBorrow1 = this;
		}
		
		private void detach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.StatusBorrow1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private System.Nullable<int> _TeamParent;
		
		private string _Description;
		
		private string _Leader;
		
		private System.Nullable<int> _Order;
		
		private System.Nullable<int> _LevelTeam;
		
		private EntitySet<LocationForTeam> _LocationForTeams;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Team> _Team1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamParentChanging(System.Nullable<int> value);
    partial void OnTeamParentChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLeaderChanging(string value);
    partial void OnLeaderChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnLevelTeamChanging(System.Nullable<int> value);
    partial void OnLevelTeamChanged();
    #endregion
		
		public Team()
		{
			this._LocationForTeams = new EntitySet<LocationForTeam>(new Action<LocationForTeam>(this.attach_LocationForTeams), new Action<LocationForTeam>(this.detach_LocationForTeams));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Team1 = default(EntityRef<Team>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamParent", DbType="Int")]
		public System.Nullable<int> TeamParent
		{
			get
			{
				return this._TeamParent;
			}
			set
			{
				if ((this._TeamParent != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamParentChanging(value);
					this.SendPropertyChanging();
					this._TeamParent = value;
					this.SendPropertyChanged("TeamParent");
					this.OnTeamParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leader", DbType="NVarChar(50)")]
		public string Leader
		{
			get
			{
				return this._Leader;
			}
			set
			{
				if ((this._Leader != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeaderChanging(value);
					this.SendPropertyChanging();
					this._Leader = value;
					this.SendPropertyChanged("Leader");
					this.OnLeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelTeam", DbType="Int")]
		public System.Nullable<int> LevelTeam
		{
			get
			{
				return this._LevelTeam;
			}
			set
			{
				if ((this._LevelTeam != value))
				{
					this.OnLevelTeamChanging(value);
					this.SendPropertyChanging();
					this._LevelTeam = value;
					this.SendPropertyChanged("LevelTeam");
					this.OnLevelTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_LocationForTeam", Storage="_LocationForTeams", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<LocationForTeam> LocationForTeams
		{
			get
			{
				return this._LocationForTeams;
			}
			set
			{
				this._LocationForTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Team", Storage="_Teams", ThisKey="TeamID", OtherKey="TeamParent")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_User", Storage="_Users", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Team", Storage="_Team1", ThisKey="TeamParent", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._TeamParent = value.TeamID;
					}
					else
					{
						this._TeamParent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Team", Storage="_User", ThisKey="Leader", OtherKey="UserName", IsForeignKey=true, DeleteRule="SET NULL")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._Leader = value.UserName;
					}
					else
					{
						this._Leader = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationForTeams(LocationForTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_LocationForTeams(LocationForTeam entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.University")]
	public partial class University : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<UserEducation> _UserEducations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public University()
		{
			this._UserEducations = new EntitySet<UserEducation>(new Action<UserEducation>(this.attach_UserEducations), new Action<UserEducation>(this.detach_UserEducations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_UserEducation", Storage="_UserEducations", ThisKey="ID", OtherKey="UniversityID")]
		public EntitySet<UserEducation> UserEducations
		{
			get
			{
				return this._UserEducations;
			}
			set
			{
				this._UserEducations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.University = this;
		}
		
		private void detach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.University = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Password;
		
		private int _TeamID;
		
		private string _JobDescription;
		
		private System.Nullable<int> _JobTitleID;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private string _FullName;
		
		private string _Avatar;
		
		private bool _Active;
		
		private System.Nullable<int> _PermissionId;
		
		private System.Nullable<int> _FavoriteProject;
		
		private string _GEN;
		
		private System.DateTime _Birthday;
		
		private string _Gender;
		
		private System.DateTime _DateJoiningSEL;
		
		private int _ToeicScore;
		
		private string _Address;
		
		private int _STCLevel;
		
		private EntityRef<AllowBorrowDevice> _AllowBorrowDevice;
		
		private EntitySet<Approve> _Approves;
		
		private EntitySet<Approve> _Approves1;
		
		private EntitySet<Approve> _Approves2;
		
		private EntitySet<AwardReward> _AwardRewards;
		
		private EntitySet<CCEmailBorrow> _CCEmailBorrows;
		
		private EntitySet<DestroyPlan> _DestroyPlans;
		
		private EntitySet<DestroyPlan> _DestroyPlans1;
		
		private EntitySet<Device> _Devices;
		
		private EntitySet<Device> _Devices1;
		
		private EntitySet<Device> _Devices2;
		
		private EntitySet<Device> _Devices3;
		
		private EntitySet<Device> _Devices4;
		
		private EntityRef<DeviceManager> _DeviceManager;
		
		private EntitySet<DeviceNotice> _DeviceNotices;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<InventoryUserDevice> _InventoryUserDevices;
		
		private EntitySet<InventoryUserDevice> _InventoryUserDevices1;
		
		private EntitySet<LocationForUser> _LocationForUsers;
		
		private EntitySet<Notification> _Notifications;
		
		private EntityRef<ResetPassword> _ResetPassword;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<User_Role> _User_Roles;
		
		private EntitySet<UserCertification> _UserCertifications;
		
		private EntitySet<UserEducation> _UserEducations;
		
		private EntitySet<UserLanguage> _UserLanguages;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntityRef<JobTitle> _JobTitle;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnJobTitleIDChanging(System.Nullable<int> value);
    partial void OnJobTitleIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPermissionIdChanging(System.Nullable<int> value);
    partial void OnPermissionIdChanged();
    partial void OnFavoriteProjectChanging(System.Nullable<int> value);
    partial void OnFavoriteProjectChanged();
    partial void OnGENChanging(string value);
    partial void OnGENChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateJoiningSELChanging(System.DateTime value);
    partial void OnDateJoiningSELChanged();
    partial void OnToeicScoreChanging(int value);
    partial void OnToeicScoreChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSTCLevelChanging(int value);
    partial void OnSTCLevelChanged();
    #endregion
		
		public User()
		{
			this._AllowBorrowDevice = default(EntityRef<AllowBorrowDevice>);
			this._Approves = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves), new Action<Approve>(this.detach_Approves));
			this._Approves1 = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves1), new Action<Approve>(this.detach_Approves1));
			this._Approves2 = new EntitySet<Approve>(new Action<Approve>(this.attach_Approves2), new Action<Approve>(this.detach_Approves2));
			this._AwardRewards = new EntitySet<AwardReward>(new Action<AwardReward>(this.attach_AwardRewards), new Action<AwardReward>(this.detach_AwardRewards));
			this._CCEmailBorrows = new EntitySet<CCEmailBorrow>(new Action<CCEmailBorrow>(this.attach_CCEmailBorrows), new Action<CCEmailBorrow>(this.detach_CCEmailBorrows));
			this._DestroyPlans = new EntitySet<DestroyPlan>(new Action<DestroyPlan>(this.attach_DestroyPlans), new Action<DestroyPlan>(this.detach_DestroyPlans));
			this._DestroyPlans1 = new EntitySet<DestroyPlan>(new Action<DestroyPlan>(this.attach_DestroyPlans1), new Action<DestroyPlan>(this.detach_DestroyPlans1));
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			this._Devices1 = new EntitySet<Device>(new Action<Device>(this.attach_Devices1), new Action<Device>(this.detach_Devices1));
			this._Devices2 = new EntitySet<Device>(new Action<Device>(this.attach_Devices2), new Action<Device>(this.detach_Devices2));
			this._Devices3 = new EntitySet<Device>(new Action<Device>(this.attach_Devices3), new Action<Device>(this.detach_Devices3));
			this._Devices4 = new EntitySet<Device>(new Action<Device>(this.attach_Devices4), new Action<Device>(this.detach_Devices4));
			this._DeviceManager = default(EntityRef<DeviceManager>);
			this._DeviceNotices = new EntitySet<DeviceNotice>(new Action<DeviceNotice>(this.attach_DeviceNotices), new Action<DeviceNotice>(this.detach_DeviceNotices));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._InventoryUserDevices = new EntitySet<InventoryUserDevice>(new Action<InventoryUserDevice>(this.attach_InventoryUserDevices), new Action<InventoryUserDevice>(this.detach_InventoryUserDevices));
			this._InventoryUserDevices1 = new EntitySet<InventoryUserDevice>(new Action<InventoryUserDevice>(this.attach_InventoryUserDevices1), new Action<InventoryUserDevice>(this.detach_InventoryUserDevices1));
			this._LocationForUsers = new EntitySet<LocationForUser>(new Action<LocationForUser>(this.attach_LocationForUsers), new Action<LocationForUser>(this.detach_LocationForUsers));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._ResetPassword = default(EntityRef<ResetPassword>);
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._User_Roles = new EntitySet<User_Role>(new Action<User_Role>(this.attach_User_Roles), new Action<User_Role>(this.detach_User_Roles));
			this._UserCertifications = new EntitySet<UserCertification>(new Action<UserCertification>(this.attach_UserCertifications), new Action<UserCertification>(this.detach_UserCertifications));
			this._UserEducations = new EntitySet<UserEducation>(new Action<UserEducation>(this.attach_UserEducations), new Action<UserEducation>(this.detach_UserEducations));
			this._UserLanguages = new EntitySet<UserLanguage>(new Action<UserLanguage>(this.attach_UserLanguages), new Action<UserLanguage>(this.detach_UserLanguages));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._JobTitle = default(EntityRef<JobTitle>);
			this._Permission = default(EntityRef<Permission>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(MAX)")]
		public string JobDescription
		{
			get
			{
				return this._JobDescription;
			}
			set
			{
				if ((this._JobDescription != value))
				{
					this.OnJobDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobDescription = value;
					this.SendPropertyChanged("JobDescription");
					this.OnJobDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitleID", DbType="Int")]
		public System.Nullable<int> JobTitleID
		{
			get
			{
				return this._JobTitleID;
			}
			set
			{
				if ((this._JobTitleID != value))
				{
					if (this._JobTitle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobTitleIDChanging(value);
					this.SendPropertyChanging();
					this._JobTitleID = value;
					this.SendPropertyChanged("JobTitleID");
					this.OnJobTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="NVarChar(255)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="Int")]
		public System.Nullable<int> PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavoriteProject", DbType="Int")]
		public System.Nullable<int> FavoriteProject
		{
			get
			{
				return this._FavoriteProject;
			}
			set
			{
				if ((this._FavoriteProject != value))
				{
					this.OnFavoriteProjectChanging(value);
					this.SendPropertyChanging();
					this._FavoriteProject = value;
					this.SendPropertyChanged("FavoriteProject");
					this.OnFavoriteProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GEN", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string GEN
		{
			get
			{
				return this._GEN;
			}
			set
			{
				if ((this._GEN != value))
				{
					this.OnGENChanging(value);
					this.SendPropertyChanging();
					this._GEN = value;
					this.SendPropertyChanged("GEN");
					this.OnGENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateJoiningSEL", DbType="Date NOT NULL")]
		public System.DateTime DateJoiningSEL
		{
			get
			{
				return this._DateJoiningSEL;
			}
			set
			{
				if ((this._DateJoiningSEL != value))
				{
					this.OnDateJoiningSELChanging(value);
					this.SendPropertyChanging();
					this._DateJoiningSEL = value;
					this.SendPropertyChanged("DateJoiningSEL");
					this.OnDateJoiningSELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToeicScore", DbType="Int NOT NULL")]
		public int ToeicScore
		{
			get
			{
				return this._ToeicScore;
			}
			set
			{
				if ((this._ToeicScore != value))
				{
					this.OnToeicScoreChanging(value);
					this.SendPropertyChanging();
					this._ToeicScore = value;
					this.SendPropertyChanged("ToeicScore");
					this.OnToeicScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STCLevel", DbType="Int NOT NULL")]
		public int STCLevel
		{
			get
			{
				return this._STCLevel;
			}
			set
			{
				if ((this._STCLevel != value))
				{
					this.OnSTCLevelChanging(value);
					this.SendPropertyChanging();
					this._STCLevel = value;
					this.SendPropertyChanged("STCLevel");
					this.OnSTCLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AllowBorrowDevice", Storage="_AllowBorrowDevice", ThisKey="UserName", OtherKey="UserName", IsUnique=true, IsForeignKey=false)]
		public AllowBorrowDevice AllowBorrowDevice
		{
			get
			{
				return this._AllowBorrowDevice.Entity;
			}
			set
			{
				AllowBorrowDevice previousValue = this._AllowBorrowDevice.Entity;
				if (((previousValue != value) 
							|| (this._AllowBorrowDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AllowBorrowDevice.Entity = null;
						previousValue.User = null;
					}
					this._AllowBorrowDevice.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("AllowBorrowDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve", Storage="_Approves", ThisKey="UserName", OtherKey="UserBorrow")]
		public EntitySet<Approve> Approves
		{
			get
			{
				return this._Approves;
			}
			set
			{
				this._Approves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve1", Storage="_Approves1", ThisKey="UserName", OtherKey="Manager")]
		public EntitySet<Approve> Approves1
		{
			get
			{
				return this._Approves1;
			}
			set
			{
				this._Approves1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Approve2", Storage="_Approves2", ThisKey="UserName", OtherKey="Borrower")]
		public EntitySet<Approve> Approves2
		{
			get
			{
				return this._Approves2;
			}
			set
			{
				this._Approves2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AwardReward", Storage="_AwardRewards", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<AwardReward> AwardRewards
		{
			get
			{
				return this._AwardRewards;
			}
			set
			{
				this._AwardRewards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CCEmailBorrow", Storage="_CCEmailBorrows", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<CCEmailBorrow> CCEmailBorrows
		{
			get
			{
				return this._CCEmailBorrows;
			}
			set
			{
				this._CCEmailBorrows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DestroyPlan", Storage="_DestroyPlans", ThisKey="UserName", OtherKey="Manager")]
		public EntitySet<DestroyPlan> DestroyPlans
		{
			get
			{
				return this._DestroyPlans;
			}
			set
			{
				this._DestroyPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DestroyPlan1", Storage="_DestroyPlans1", ThisKey="UserName", OtherKey="Approver")]
		public EntitySet<DestroyPlan> DestroyPlans1
		{
			get
			{
				return this._DestroyPlans1;
			}
			set
			{
				this._DestroyPlans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device", Storage="_Devices", ThisKey="UserName", OtherKey="Manager")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device1", Storage="_Devices1", ThisKey="UserName", OtherKey="Keeper")]
		public EntitySet<Device> Devices1
		{
			get
			{
				return this._Devices1;
			}
			set
			{
				this._Devices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device2", Storage="_Devices2", ThisKey="UserName", OtherKey="Receiver")]
		public EntitySet<Device> Devices2
		{
			get
			{
				return this._Devices2;
			}
			set
			{
				this._Devices2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device3", Storage="_Devices3", ThisKey="UserName", OtherKey="Borrower")]
		public EntitySet<Device> Devices3
		{
			get
			{
				return this._Devices3;
			}
			set
			{
				this._Devices3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Device4", Storage="_Devices4", ThisKey="UserName", OtherKey="NewKeeper")]
		public EntitySet<Device> Devices4
		{
			get
			{
				return this._Devices4;
			}
			set
			{
				this._Devices4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeviceManager", Storage="_DeviceManager", ThisKey="UserName", OtherKey="UserName", IsUnique=true, IsForeignKey=false)]
		public DeviceManager DeviceManager
		{
			get
			{
				return this._DeviceManager.Entity;
			}
			set
			{
				DeviceManager previousValue = this._DeviceManager.Entity;
				if (((previousValue != value) 
							|| (this._DeviceManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceManager.Entity = null;
						previousValue.User = null;
					}
					this._DeviceManager.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("DeviceManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DeviceNotice", Storage="_DeviceNotices", ThisKey="UserName", OtherKey="CreateBy")]
		public EntitySet<DeviceNotice> DeviceNotices
		{
			get
			{
				return this._DeviceNotices;
			}
			set
			{
				this._DeviceNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Inventory", Storage="_Inventories", ThisKey="UserName", OtherKey="RequestBy")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InventoryUserDevice", Storage="_InventoryUserDevices", ThisKey="UserName", OtherKey="Borrower")]
		public EntitySet<InventoryUserDevice> InventoryUserDevices
		{
			get
			{
				return this._InventoryUserDevices;
			}
			set
			{
				this._InventoryUserDevices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InventoryUserDevice1", Storage="_InventoryUserDevices1", ThisKey="UserName", OtherKey="Keeper")]
		public EntitySet<InventoryUserDevice> InventoryUserDevices1
		{
			get
			{
				return this._InventoryUserDevices1;
			}
			set
			{
				this._InventoryUserDevices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LocationForUser", Storage="_LocationForUsers", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<LocationForUser> LocationForUsers
		{
			get
			{
				return this._LocationForUsers;
			}
			set
			{
				this._LocationForUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_Notifications", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ResetPassword", Storage="_ResetPassword", ThisKey="UserName", OtherKey="UserName", IsUnique=true, IsForeignKey=false)]
		public ResetPassword ResetPassword
		{
			get
			{
				return this._ResetPassword.Entity;
			}
			set
			{
				ResetPassword previousValue = this._ResetPassword.Entity;
				if (((previousValue != value) 
							|| (this._ResetPassword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResetPassword.Entity = null;
						previousValue.User = null;
					}
					this._ResetPassword.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("ResetPassword");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Team", Storage="_Teams", ThisKey="UserName", OtherKey="Leader")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Role", Storage="_User_Roles", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<User_Role> User_Roles
		{
			get
			{
				return this._User_Roles;
			}
			set
			{
				this._User_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCertification", Storage="_UserCertifications", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserCertification> UserCertifications
		{
			get
			{
				return this._UserCertifications;
			}
			set
			{
				this._UserCertifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEducation", Storage="_UserEducations", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserEducation> UserEducations
		{
			get
			{
				return this._UserEducations;
			}
			set
			{
				this._UserEducations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLanguage", Storage="_UserLanguages", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserLanguage> UserLanguages
		{
			get
			{
				return this._UserLanguages;
			}
			set
			{
				this._UserLanguages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_UserPermissions", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_User", Storage="_JobTitle", ThisKey="JobTitleID", OtherKey="JobTitleID", IsForeignKey=true)]
		public JobTitle JobTitle
		{
			get
			{
				return this._JobTitle.Entity;
			}
			set
			{
				JobTitle previousValue = this._JobTitle.Entity;
				if (((previousValue != value) 
							|| (this._JobTitle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobTitle.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._JobTitle.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._JobTitleID = value.JobTitleID;
					}
					else
					{
						this._JobTitleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("JobTitle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_User", Storage="_Permission", ThisKey="PermissionId", OtherKey="id", IsForeignKey=true, DeleteRule="SET NULL")]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._PermissionId = value.id;
					}
					else
					{
						this._PermissionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_User", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Approves(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Approves1(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Approves1(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Approves2(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_Approves2(Approve entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_AwardRewards(AwardReward entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AwardRewards(AwardReward entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CCEmailBorrows(CCEmailBorrow entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CCEmailBorrows(CCEmailBorrow entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DestroyPlans(DestroyPlan entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DestroyPlans(DestroyPlan entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DestroyPlans1(DestroyPlan entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_DestroyPlans1(DestroyPlan entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Devices1(Device entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Devices1(Device entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Devices2(Device entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_Devices2(Device entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_Devices3(Device entity)
		{
			this.SendPropertyChanging();
			entity.User3 = this;
		}
		
		private void detach_Devices3(Device entity)
		{
			this.SendPropertyChanging();
			entity.User3 = null;
		}
		
		private void attach_Devices4(Device entity)
		{
			this.SendPropertyChanging();
			entity.User4 = this;
		}
		
		private void detach_Devices4(Device entity)
		{
			this.SendPropertyChanging();
			entity.User4 = null;
		}
		
		private void attach_DeviceNotices(DeviceNotice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DeviceNotices(DeviceNotice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_InventoryUserDevices(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InventoryUserDevices1(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_InventoryUserDevices1(InventoryUserDevice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_LocationForUsers(LocationForUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LocationForUsers(LocationForUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_User_Roles(User_Role entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserCertifications(UserCertification entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCertifications(UserCertification entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLanguages(UserLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLanguages(UserLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_Role")]
	public partial class User_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private int _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public User_Role()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_Role", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.User_Roles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.User_Roles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User_Role", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.User_Roles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.User_Roles.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCertification")]
	public partial class UserCertification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private int _DataCertificationID;
		
		private string _OtherDataCertification;
		
		private int _Grade;
		
		private System.DateTime _IssueDate;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private string _LicenseNo;
		
		private string _IssuedBy;
		
		private EntityRef<DataCertification> _DataCertification;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDataCertificationIDChanging(int value);
    partial void OnDataCertificationIDChanged();
    partial void OnOtherDataCertificationChanging(string value);
    partial void OnOtherDataCertificationChanged();
    partial void OnGradeChanging(int value);
    partial void OnGradeChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnLicenseNoChanging(string value);
    partial void OnLicenseNoChanged();
    partial void OnIssuedByChanging(string value);
    partial void OnIssuedByChanged();
    #endregion
		
		public UserCertification()
		{
			this._DataCertification = default(EntityRef<DataCertification>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataCertificationID", DbType="Int NOT NULL")]
		public int DataCertificationID
		{
			get
			{
				return this._DataCertificationID;
			}
			set
			{
				if ((this._DataCertificationID != value))
				{
					if (this._DataCertification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DataCertificationID = value;
					this.SendPropertyChanged("DataCertificationID");
					this.OnDataCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherDataCertification", DbType="NVarChar(50)")]
		public string OtherDataCertification
		{
			get
			{
				return this._OtherDataCertification;
			}
			set
			{
				if ((this._OtherDataCertification != value))
				{
					this.OnOtherDataCertificationChanging(value);
					this.SendPropertyChanging();
					this._OtherDataCertification = value;
					this.SendPropertyChanged("OtherDataCertification");
					this.OnOtherDataCertificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int NOT NULL")]
		public int Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="Date")]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseNo", DbType="NVarChar(50)")]
		public string LicenseNo
		{
			get
			{
				return this._LicenseNo;
			}
			set
			{
				if ((this._LicenseNo != value))
				{
					this.OnLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._LicenseNo = value;
					this.SendPropertyChanged("LicenseNo");
					this.OnLicenseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuedBy", DbType="NVarChar(100)")]
		public string IssuedBy
		{
			get
			{
				return this._IssuedBy;
			}
			set
			{
				if ((this._IssuedBy != value))
				{
					this.OnIssuedByChanging(value);
					this.SendPropertyChanging();
					this._IssuedBy = value;
					this.SendPropertyChanged("IssuedBy");
					this.OnIssuedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataCertification_UserCertification", Storage="_DataCertification", ThisKey="DataCertificationID", OtherKey="ID", IsForeignKey=true)]
		public DataCertification DataCertification
		{
			get
			{
				return this._DataCertification.Entity;
			}
			set
			{
				DataCertification previousValue = this._DataCertification.Entity;
				if (((previousValue != value) 
							|| (this._DataCertification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataCertification.Entity = null;
						previousValue.UserCertifications.Remove(this);
					}
					this._DataCertification.Entity = value;
					if ((value != null))
					{
						value.UserCertifications.Add(this);
						this._DataCertificationID = value.ID;
					}
					else
					{
						this._DataCertificationID = default(int);
					}
					this.SendPropertyChanged("DataCertification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCertification", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCertifications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCertifications.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEducation")]
	public partial class UserEducation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EducationLevel;
		
		private string _UserName;
		
		private int _UniversityID;
		
		private string _OtherUniversity;
		
		private System.DateTime _Enteredat;
		
		private System.DateTime _Graduated;
		
		private int _MajorID;
		
		private string _OtherMajor;
		
		private EntityRef<EducationLevel> _EducationLevel1;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<University> _University;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEducationLevelChanging(int value);
    partial void OnEducationLevelChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUniversityIDChanging(int value);
    partial void OnUniversityIDChanged();
    partial void OnOtherUniversityChanging(string value);
    partial void OnOtherUniversityChanged();
    partial void OnEnteredatChanging(System.DateTime value);
    partial void OnEnteredatChanged();
    partial void OnGraduatedChanging(System.DateTime value);
    partial void OnGraduatedChanged();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnOtherMajorChanging(string value);
    partial void OnOtherMajorChanged();
    #endregion
		
		public UserEducation()
		{
			this._EducationLevel1 = default(EntityRef<EducationLevel>);
			this._Major = default(EntityRef<Major>);
			this._University = default(EntityRef<University>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevel", DbType="Int NOT NULL")]
		public int EducationLevel
		{
			get
			{
				return this._EducationLevel;
			}
			set
			{
				if ((this._EducationLevel != value))
				{
					if (this._EducationLevel1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEducationLevelChanging(value);
					this.SendPropertyChanging();
					this._EducationLevel = value;
					this.SendPropertyChanged("EducationLevel");
					this.OnEducationLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniversityID", DbType="Int NOT NULL")]
		public int UniversityID
		{
			get
			{
				return this._UniversityID;
			}
			set
			{
				if ((this._UniversityID != value))
				{
					if (this._University.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniversityIDChanging(value);
					this.SendPropertyChanging();
					this._UniversityID = value;
					this.SendPropertyChanged("UniversityID");
					this.OnUniversityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherUniversity", DbType="NVarChar(255)")]
		public string OtherUniversity
		{
			get
			{
				return this._OtherUniversity;
			}
			set
			{
				if ((this._OtherUniversity != value))
				{
					this.OnOtherUniversityChanging(value);
					this.SendPropertyChanging();
					this._OtherUniversity = value;
					this.SendPropertyChanged("OtherUniversity");
					this.OnOtherUniversityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enteredat", DbType="Date NOT NULL")]
		public System.DateTime Enteredat
		{
			get
			{
				return this._Enteredat;
			}
			set
			{
				if ((this._Enteredat != value))
				{
					this.OnEnteredatChanging(value);
					this.SendPropertyChanging();
					this._Enteredat = value;
					this.SendPropertyChanged("Enteredat");
					this.OnEnteredatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Graduated", DbType="Date NOT NULL")]
		public System.DateTime Graduated
		{
			get
			{
				return this._Graduated;
			}
			set
			{
				if ((this._Graduated != value))
				{
					this.OnGraduatedChanging(value);
					this.SendPropertyChanging();
					this._Graduated = value;
					this.SendPropertyChanged("Graduated");
					this.OnGraduatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int NOT NULL")]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherMajor", DbType="NVarChar(50)")]
		public string OtherMajor
		{
			get
			{
				return this._OtherMajor;
			}
			set
			{
				if ((this._OtherMajor != value))
				{
					this.OnOtherMajorChanging(value);
					this.SendPropertyChanging();
					this._OtherMajor = value;
					this.SendPropertyChanged("OtherMajor");
					this.OnOtherMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EducationLevel_UserEducation", Storage="_EducationLevel1", ThisKey="EducationLevel", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EducationLevel EducationLevel1
		{
			get
			{
				return this._EducationLevel1.Entity;
			}
			set
			{
				EducationLevel previousValue = this._EducationLevel1.Entity;
				if (((previousValue != value) 
							|| (this._EducationLevel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EducationLevel1.Entity = null;
						previousValue.UserEducations.Remove(this);
					}
					this._EducationLevel1.Entity = value;
					if ((value != null))
					{
						value.UserEducations.Add(this);
						this._EducationLevel = value.ID;
					}
					else
					{
						this._EducationLevel = default(int);
					}
					this.SendPropertyChanged("EducationLevel1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_UserEducation", Storage="_Major", ThisKey="MajorID", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.UserEducations.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.UserEducations.Add(this);
						this._MajorID = value.ID;
					}
					else
					{
						this._MajorID = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="University_UserEducation", Storage="_University", ThisKey="UniversityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public University University
		{
			get
			{
				return this._University.Entity;
			}
			set
			{
				University previousValue = this._University.Entity;
				if (((previousValue != value) 
							|| (this._University.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._University.Entity = null;
						previousValue.UserEducations.Remove(this);
					}
					this._University.Entity = value;
					if ((value != null))
					{
						value.UserEducations.Add(this);
						this._UniversityID = value.ID;
					}
					else
					{
						this._UniversityID = default(int);
					}
					this.SendPropertyChanged("University");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEducation", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEducations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEducations.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLanguage")]
	public partial class UserLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Languageid;
		
		private string _OtherLanguage;
		
		private bool _Native;
		
		private int _ScoreOverall;
		
		private int _ScoreSpeak;
		
		private int _ScoreRead;
		
		private int _ScoreWrite;
		
		private string _UserName;
		
		private EntityRef<User> _User;
		
		private EntityRef<DataLanguage> _DataLanguage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLanguageidChanging(int value);
    partial void OnLanguageidChanged();
    partial void OnOtherLanguageChanging(string value);
    partial void OnOtherLanguageChanged();
    partial void OnNativeChanging(bool value);
    partial void OnNativeChanged();
    partial void OnScoreOverallChanging(int value);
    partial void OnScoreOverallChanged();
    partial void OnScoreSpeakChanging(int value);
    partial void OnScoreSpeakChanged();
    partial void OnScoreReadChanging(int value);
    partial void OnScoreReadChanged();
    partial void OnScoreWriteChanging(int value);
    partial void OnScoreWriteChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public UserLanguage()
		{
			this._User = default(EntityRef<User>);
			this._DataLanguage = default(EntityRef<DataLanguage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Languageid", DbType="Int NOT NULL")]
		public int Languageid
		{
			get
			{
				return this._Languageid;
			}
			set
			{
				if ((this._Languageid != value))
				{
					if (this._DataLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageidChanging(value);
					this.SendPropertyChanging();
					this._Languageid = value;
					this.SendPropertyChanged("Languageid");
					this.OnLanguageidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherLanguage", DbType="NVarChar(50)")]
		public string OtherLanguage
		{
			get
			{
				return this._OtherLanguage;
			}
			set
			{
				if ((this._OtherLanguage != value))
				{
					this.OnOtherLanguageChanging(value);
					this.SendPropertyChanging();
					this._OtherLanguage = value;
					this.SendPropertyChanged("OtherLanguage");
					this.OnOtherLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Native", DbType="Bit NOT NULL")]
		public bool Native
		{
			get
			{
				return this._Native;
			}
			set
			{
				if ((this._Native != value))
				{
					this.OnNativeChanging(value);
					this.SendPropertyChanging();
					this._Native = value;
					this.SendPropertyChanged("Native");
					this.OnNativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreOverall", DbType="Int NOT NULL")]
		public int ScoreOverall
		{
			get
			{
				return this._ScoreOverall;
			}
			set
			{
				if ((this._ScoreOverall != value))
				{
					this.OnScoreOverallChanging(value);
					this.SendPropertyChanging();
					this._ScoreOverall = value;
					this.SendPropertyChanged("ScoreOverall");
					this.OnScoreOverallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreSpeak", DbType="Int NOT NULL")]
		public int ScoreSpeak
		{
			get
			{
				return this._ScoreSpeak;
			}
			set
			{
				if ((this._ScoreSpeak != value))
				{
					this.OnScoreSpeakChanging(value);
					this.SendPropertyChanging();
					this._ScoreSpeak = value;
					this.SendPropertyChanged("ScoreSpeak");
					this.OnScoreSpeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreRead", DbType="Int NOT NULL")]
		public int ScoreRead
		{
			get
			{
				return this._ScoreRead;
			}
			set
			{
				if ((this._ScoreRead != value))
				{
					this.OnScoreReadChanging(value);
					this.SendPropertyChanging();
					this._ScoreRead = value;
					this.SendPropertyChanged("ScoreRead");
					this.OnScoreReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreWrite", DbType="Int NOT NULL")]
		public int ScoreWrite
		{
			get
			{
				return this._ScoreWrite;
			}
			set
			{
				if ((this._ScoreWrite != value))
				{
					this.OnScoreWriteChanging(value);
					this.SendPropertyChanging();
					this._ScoreWrite = value;
					this.SendPropertyChanged("ScoreWrite");
					this.OnScoreWriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLanguage", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLanguages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLanguages.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataLanguage_UserLanguage", Storage="_DataLanguage", ThisKey="Languageid", OtherKey="ID", IsForeignKey=true, DeleteRule="SET DEFAULT")]
		public DataLanguage DataLanguage
		{
			get
			{
				return this._DataLanguage.Entity;
			}
			set
			{
				DataLanguage previousValue = this._DataLanguage.Entity;
				if (((previousValue != value) 
							|| (this._DataLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataLanguage.Entity = null;
						previousValue.UserLanguages.Remove(this);
					}
					this._DataLanguage.Entity = value;
					if ((value != null))
					{
						value.UserLanguages.Add(this);
						this._Languageid = value.ID;
					}
					else
					{
						this._Languageid = default(int);
					}
					this.SendPropertyChanged("DataLanguage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermission")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private int _PermissionFuncID;
		
		private System.Nullable<int> _PermissionNumber;
		
		private EntityRef<PermissionFunc> _PermissionFunc;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPermissionFuncIDChanging(int value);
    partial void OnPermissionFuncIDChanged();
    partial void OnPermissionNumberChanging(System.Nullable<int> value);
    partial void OnPermissionNumberChanged();
    #endregion
		
		public UserPermission()
		{
			this._PermissionFunc = default(EntityRef<PermissionFunc>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionFuncID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionFuncID
		{
			get
			{
				return this._PermissionFuncID;
			}
			set
			{
				if ((this._PermissionFuncID != value))
				{
					if (this._PermissionFunc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionFuncIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionFuncID = value;
					this.SendPropertyChanged("PermissionFuncID");
					this.OnPermissionFuncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionNumber", DbType="Int")]
		public System.Nullable<int> PermissionNumber
		{
			get
			{
				return this._PermissionNumber;
			}
			set
			{
				if ((this._PermissionNumber != value))
				{
					this.OnPermissionNumberChanging(value);
					this.SendPropertyChanging();
					this._PermissionNumber = value;
					this.SendPropertyChanged("PermissionNumber");
					this.OnPermissionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionFunc_UserPermission", Storage="_PermissionFunc", ThisKey="PermissionFuncID", OtherKey="PermissionFuncID", IsForeignKey=true)]
		public PermissionFunc PermissionFunc
		{
			get
			{
				return this._PermissionFunc.Entity;
			}
			set
			{
				PermissionFunc previousValue = this._PermissionFunc.Entity;
				if (((previousValue != value) 
							|| (this._PermissionFunc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionFunc.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._PermissionFunc.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PermissionFuncID = value.PermissionFuncID;
					}
					else
					{
						this._PermissionFuncID = default(int);
					}
					this.SendPropertyChanged("PermissionFunc");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermission", Storage="_User", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
